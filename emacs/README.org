#+title: My setup for development
#+author: Maur√≠cio Mussatto Scopel

* Setup
mkdir ~/.config/.emacs-default/snippets/java-mode
ln -s ~/development/setup-dev/emacs/snippets/java/assert-equals ~/.config/.emacs-default/snippets/java-mode/assert-equals
ln -s ~/development/setup-dev/emacs/snippets/java/test ~/.config/.emacs-default/snippets/java-mode/test

** MacOS only

#+begin_src bash

  # To maked dired work
  brew install coreutils
  # To make org-download work
  brew install pngpaste

#+end_src


** Install Fonts

The first time you load your configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:

#+begin_src bash

  M-x all-the-icons-install-fonts
  # If that doesn't work, try:
  M-x nerd-icons-install-fonts

#+end_src
* Emacs Basics
** Key Bindings

- =C-h k= - Find function by keymap
- =C-h m= - Enumerate all the active minor and major mode key bindings in the current buffer
- =<prefix> C-h= - Get a list of all keys that belong to that prefix
- =M-x describe-keymap= - Describe a keymap
- =C-M-x= - Evalutes the top-level expression
- =C-x 8 RET= - Select unicode character to insert
- =C-c C-l= - Add link to org-mode buffer

** Utilities

- =C-u <number> <key>= - Repeat ~<key>~, ~<number>~ times

** Adding Hook by file type opened

#+begin_src elisp

  ;; GQL example
  (add-hook 'find-file-hook 'gql-buffers-hook)
  (defun gql-buffers-hook ()
    (when (string= (file-name-extension buffer-file-name) "gql") 
      ;; code to run
      ))

#+end_src

* Minibuffer History
- =M-p= - Go to previous history record saved
- =M-n= - Go to next history record saved
* Projectile
** Prefixes

When available are optional:
    - 4: Open the result into a new window
    - 5: Open the result into a new frame

** Project Management

- C-c p c: Compile
- C-c p m: Open projectile commander
- C-c p p: Switch project
- C-c p <prefix> d: List directories
- C-c p <prefix> D: Open the root of the project in dired
- C-c p <prefix> b: Display a list of all project buffers currently open
- C-c p i: Invalidate the project cache
- C-c p k: Kill all project buffers
- C-c p left: Switch to the previous project buffer
- C-c p right: Switch to the next project buffer
- C-c p S: Save all project buffers
- C-c p x t: Open a terminal for the project
- C-c p ESC: Switch to the most recently selected Projectile buffer 

** File Search

  - C-c p <prefix> f: FInd file in current project
  - C-c p <prefix> F: Find a file in all known projects

** Text Search

- C-c p s g: Search acrross files of the project

** Tests

- C-c p P: Run tests
- C-c p t: Toggle between implementation and test
  
* Flycheck
- C-c ! l: List errors
- C-c ! n: Go to next error
- C-c ! p: Go to previous error
* Java

*With the package =semgrep= installed on my machine the Code Actions simply doesn't work, uninstalling it make Code Actions work very well.*

- C-c l a a: Execute code action
- C-c l r r: Rename
- C-c l h h: Describe thing at point
- C-c l = =: Format buffer
- C-c l g r: Find references
- C-c l g i: Go to implementation
  
- lsp-java-organize-imports
- lsp-java-type-hierarchy 
- M-?: Find references
  - C-n:  Navigate to the next reference
  - C-p: Navigate to the previous reference
- M-.: Jump to the reference selected
- M-,: Back to the previous location
- C-c l g a: Search symbols
  - ~@/~ shows all defined request mappings (mapped path, request method, source location)
  - ~@+~ shows all defined beans (bean name, bean type, source location)
  - ~@>~ shows all functions (prototype implementation)
  - ~@~ shows all Spring annotations in the code
- ~C-c l t c~ Run test class
- ~C-c l t m~ Run test method
     
** yasnippet

file: Create class structure
ae: assertEquals(,)
test: Create test method

** gradle

To enhance test output import this plugin:

	id 'com.adarshr.test-logger' version '3.2.0'

* Company

Manual: https://company-mode.github.io/manual/

- M-(digit): Complete with one of the first 10 candidates
- <f1>: Display documentation of the selected candidate

* lsp-ui

- C-c l c s: Show doc for thing at point
- C-c l c h: Hide any opened documentation

* treemacs 

- lsp-treemacs-symbols: Display symbols list for current class
- C-c l g e: Display error list
- C-c l g h: Display call hierarchy for current point 

* Debugging with dap-mode 

- dap-debug-last: Debug again the last session
- dap-disconnect: Disconnect from debugger
- dap-debug-recent: Choose what to debug from a list of the recent debug sessions executed
- dap-ui-expressions-add: Add expression to watch
- dap-ui-repl: Open repl
- dap-ui-breakpoints: Open breakpoints panel
- C-c l d: Open hydra debugger navigation panel
- f7: Step in
- f8: Next
- f9: Continue

* Updating Lombok 
rm ~/development/dependencies/lombok.jar
# restart emacs

* Ivy
- =C-M-j= - Immediatelly done
* Org Mode

- =C-c C-x C-v= - Toggle the display of inline images

** Org Babel

- =C-c c=: Run code block
- =C-c C-v t=: Tangle code block
  
** Presentation

These packages allow you to create presentations from org mode files

*** Org Tree Slide 

**** Package configuration

#+begin_src emacs-lisp

 (defun setup-dev/presentation-setup ()
  (org-display-inline-images)
  
  (setq-local face-remapping-alist '((default (:height 2.0) variable-pitch)
                                     (org-verbatim (:height 1.75) org-verbatim)
                                     (org-block (:height 1.25) org-block))))

(defun setup-dev/presentation-end ()
  (setq-local face-remapping-alist '((default variable-pitch default))))

(use-package org-tree-slide
  :hook ((org-tree-slide-play . setup-dev/presentation-setup)
		 (org-tree-slide-stop . setup-dev/presentation-end))
  :custom
  (org-tree-slide-slide-in-effect t)
  (org-tree-slide-activate-message "Presentation started!")
  (org-tree-slide-deactivate-message "Presentation finished!")
  (org-tree-slide-header t)
  (org-tree-slide-breadcrumbs " > ")
  (org-image-actual-width nil))


#+end_src

**** Starting presentation

To start the presentation run =org-tree-slide-mode=.
To start with timer, run =org-tree-slide-play-with-timer=.

**** Profiles

These commands allows you to enable profiles for different purposes

- =org-tree-slide-simple-profile=: For simple use
- =org-tree-slide-presentation-profile=: For Presentation use
- =org-tree-slide-narrowing-control-profile=: Only shows TODO slide pages

**** Interacting with slides

- =C->=: Display the next slide
- =C-<=: Display the previous slide

*** Org Present 

**** Key Bindings

| Key       | Command                  | Description                            |
|-----------+--------------------------+----------------------------------------|
| ~<left>~  | =org-present-prev=       | Move to the previous slide             |
| ~<right>~ | =org-present-next=       | Move to the next slide                 |
| ~C-c <~   | =org-present-beginning=  | Move to the first slide                |
| ~C-c >~   | =org-present-end=        | Move to the last slide                 |
| ~C-c C-q~ | =org-present-quit=       | Exit the presentation and reset buffer |
| ~C-c C-r~ | =org-present-read-only=  | Make the slides read-only              |
| ~C-c C-w~ | =org-present-read-write= | Make the slides writable               |

* File Management with Dired

** Opening

- =C-x d= - Open Dired
- =C-x C-j= - Jump to Dired buffer corresponding to the current buffer

** Navigation

- =n= / =j= - Go to next line
- =p= / =k= - Go to previous line
- =j= / =J= - Jump to file in buffer
- =RET= - Select file or directory
- =^= - Go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= - Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)
- =H= - Toggle between show or hide dotfiles

** Configuration

#+begin_src emacs-lisp

(use-package dired-single)

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

#+end_src

*** Configure external applications to open specific files 

#+begin_src emacs-lisp

(use-package dired-open
  :after dired
  :config
  (setq dired-open-extensions
		'(("png" . "feh")
		  ("jpg" . "feh")
		  ("jpeg" . "feh")
		  ("mp4" . "mpv"))))

#+end_src

*** Configure command to hide/display dotfiles

#+begin_src emacs-lisp

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
	"H" 'dired-hide-dotfiles-mode))

#+end_src

** File Operations

*** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
*** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

*** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

*** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

*** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs
- =(= - Hide details
** File Icons

#+begin_src emacs-lisp

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

#+end_src
* SQL

** ecj-sql

First of all, install [[https://leiningen.org/][Leiningen]].

*** Installing drivers

#+begin_src shell
  mvn org.apache.maven.plugins:maven-dependency-plugin:get -Dartifact=mysql:mysql-connector-java:8.0.21
#+end_src

*** Commands

To use the key bindings the ~ejc-sql-mode~ should be enabled.

- =ejc-invalidate-cache=
- =C-c ei= - connect interactively
- =C-c ec= - connect to a pre-configured connection
- =C-M-c= - Trigger autocomplete
- =C-c C-c= - Run SQL
  
